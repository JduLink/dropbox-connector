/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.dropbox;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.filter.LoggingFilter;
import com.sun.jersey.api.representation.Form;
import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.FormDataBodyPart;
import com.sun.jersey.multipart.FormDataMultiPart;
import com.sun.jersey.multipart.MultiPart;
import com.sun.jersey.oauth.client.OAuthClientFilter;
import com.sun.jersey.oauth.signature.HMAC_SHA1;
import com.sun.jersey.oauth.signature.OAuthParameters;
import com.sun.jersey.oauth.signature.OAuthSecrets;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.mule.api.lifecycle.Disposable;
import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.config.i18n.MessageFactory;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import javax.ws.rs.core.MediaType;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

@Connector(namespacePrefix = "dropbox")
public class DropboxCloudConnector implements Initialisable, Disposable
{
    @Property(optional = true)
    private String server = "api.dropbox.com";

    @Property(optional = true)
    private String contentServer = "api-content.dropbox.com";

    @Property(optional = true)
    private int port = 80;

    @Property()
    private String userEmail;

    @Property
    private String userPassword;

    @Property
    private String appKey;

    @Property
    private String appSecret;
    private Client client;

    @Property(optional = true)
    private boolean debug;

    protected String token;
    protected String secret;


    /*
    * The following is a sample operation
    */
    @Operation
    public void myOperation()
    {
    }

    public String getServer()
    {
        return server;
    }

    public void setServer(String server)
    {
        this.server = server;
    }

    public String getContentServer()
    {
        return contentServer;
    }

    public void setContentServer(String contentServer)
    {
        this.contentServer = contentServer;
    }

    public int getPort()
    {
        return port;
    }

    public void setPort(int port)
    {
        this.port = port;
    }

    public String getUserEmail()
    {
        return userEmail;
    }

    public void setUserEmail(String userEmail)
    {
        this.userEmail = userEmail;
    }

    public String getUserPassword()
    {
        return userPassword;
    }

    public void setUserPassword(String userPassword)
    {
        this.userPassword = userPassword;
    }

    public String getAppKey()
    {
        return appKey;
    }

    public void setAppKey(String appKey)
    {
        this.appKey = appKey;
    }

    public String getAppSecret()
    {
        return appSecret;
    }

    public void setAppSecret(String appSecret)
    {
        this.appSecret = appSecret;
    }

    @Override
    public void initialise() throws InitialisationException
    {
        client = Client.create();
        final String path = "token";
        final String url = getApiUrl(path);
        try
        {
            final WebResource login = client.resource(url);
            login.accept(MediaType.APPLICATION_JSON_TYPE)
                    .type(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
            Form form = new Form();
            form.add("email", getUserEmail());
            form.add("password", getUserPassword());
            form.add("oauth_consumer_key", getAppKey());
            final String response = login.post(String.class, form);
            final JSONObject json = (JSONObject) JSONValue.parse(response);
            token = (String) json.get("token");
            secret = (String) json.get("secret");
        } catch (UniformInterfaceException e)
        {
            unwrapException(e);
        }
    }

    protected void unwrapException(UniformInterfaceException e) throws InitialisationException
    {
        if (e.getCause() != null)
        {
            // TODO more than init exceptions
            throw new InitialisationException(e.getCause(), this);
        } else
        {
            throw new InitialisationException(MessageFactory.createStaticMessage(e.getMessage()), this);

        }
    }

    /**
     * @param path path without leading /
     */
    protected String getApiUrl(String path)
    {
        return String.format("%s://%s/0/%s", "https", getServer(), path);
    }

    /**
     * @param path path without leading /
     */
    protected String getApiContentUrl(String path)
    {
        return String.format("%s://%s/0/files/dropbox/%s", "https", getContentServer(), path);
    }

    public boolean isDebug()
    {
        return debug;
    }

    public void setDebug(boolean debug)
    {
        this.debug = debug;
    }

    @Operation
    public void createFolder(@Parameter(name = "path") String path) throws Exception
    {
        final String apiUrl = getApiUrl("fileops/create_folder");

        WebResource r = client.resource(apiUrl);
        r.accept(MediaType.APPLICATION_JSON_TYPE)
                .type(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
        r = r.queryParam("root", "dropbox").queryParam("path", path);

        OAuthParameters params = new OAuthParameters()
                .signatureMethod(HMAC_SHA1.NAME)
                .consumerKey(getAppKey())
                .token(token).version();

        OAuthSecrets secrets = new OAuthSecrets()
                .consumerSecret(getAppSecret())
                .tokenSecret(secret);

        OAuthClientFilter filter = new OAuthClientFilter(
                client.getProviders(),
                params,
                secrets
        );

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(filter);

        try
        {
            String response = r.post(String.class);
        } catch (UniformInterfaceException e)
        {
            unwrapException(e);
        }

    }


    @Operation
    public void uploadFile(@Parameter(name = "payload", optional = true, defaultValue = "#[payload]") final InputStream fileDataObj,
                           @Parameter(name = "path") String path,
                           @Parameter(name = "filename", defaultValue = "#[header:inbound:originalFilename", optional = true)
                           final String filename)
            throws Exception
    {
        final InputStream fileData = (InputStream) fileDataObj;
        final String apiUrl = getApiContentUrl(path);

        WebResource r = client.resource(apiUrl)
                //.queryParam("root", "dropbox")
                .queryParam("file", filename);

        final FormDataBodyPart formDataBodyPart = new FormDataBodyPart(fileData, MediaType.APPLICATION_OCTET_STREAM_TYPE);
        MultiPart parts = new FormDataMultiPart()
                .bodyPart(formDataBodyPart);

        formDataBodyPart.setContentDisposition(FormDataContentDisposition.name("file")
                .fileName(filename)
                .size(fileData.available())
                .modificationDate(new Date()).build());

        OAuthParameters params = new OAuthParameters()
                .signatureMethod(HMAC_SHA1.NAME)
                .consumerKey(getAppKey())
                .token(token).version();

        OAuthSecrets secrets = new OAuthSecrets()
                .consumerSecret(getAppSecret())
                .tokenSecret(secret);

        OAuthClientFilter filter = new OAuthClientFilter(
                client.getProviders(),
                params,
                secrets
        );

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(filter);

        try
        {
            String response = r.type(MediaType.MULTIPART_FORM_DATA_TYPE).post(String.class, parts);
        } catch (UniformInterfaceException e)
        {
            unwrapException(e);
        }


    }

    @Operation
    public List<String> list(@Parameter(name = "directory") String dir) throws Exception
    {
        final String apiUrl = getApiUrl("metadata/dropbox");

        WebResource r = client.resource(apiUrl).path(dir);

        OAuthParameters params = new OAuthParameters()
                .signatureMethod(HMAC_SHA1.NAME)
                .consumerKey(getAppKey())
                .token(token).version();

        OAuthSecrets secrets = new OAuthSecrets()
                .consumerSecret(getAppSecret())
                .tokenSecret(secret);

        OAuthClientFilter filter = new OAuthClientFilter(
                client.getProviders(),
                params,
                secrets
        );

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(filter);

        try
        {
            String response = r.get(String.class);
            final JSONObject root = (JSONObject) JSONValue.parse(response);
            final JSONArray files = (JSONArray) root.get("contents");
            List<String> paths = new ArrayList<String>(files.size());
            for (int i = 0; i < files.size(); i++)
            {
                JSONObject file = (JSONObject) files.get(i);
                paths.add(file.get("path").toString());
            }
            return paths;
        } catch (UniformInterfaceException e)
        {
            unwrapException(e);
        }

        return Collections.emptyList();
    }

    @Operation
    public InputStream downloadFile(@Parameter(name = "file") String path) throws Exception
    {
        if (path.startsWith("/"))
        {
            path = path.substring(1);
        }
        final String apiUrl = getApiContentUrl(path);

        WebResource r = client.resource(apiUrl);

        OAuthParameters params = new OAuthParameters()
                .signatureMethod(HMAC_SHA1.NAME)
                .consumerKey(getAppKey())
                .token(token).version();

        OAuthSecrets secrets = new OAuthSecrets()
                .consumerSecret(getAppSecret())
                .tokenSecret(secret);

        OAuthClientFilter filter = new OAuthClientFilter(
                client.getProviders(),
                params,
                secrets
        );

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(filter);

        try
        {
            InputStream response = r.get(InputStream.class);
            return response;

        } catch (UniformInterfaceException e)
        {
            unwrapException(e);
        }
        // TODO cleanup
        return null;
    }

    @Operation
    public InputStream moveFile(@Parameter(name = "from") String from,
                            @Parameter(name = "to") String to) throws Exception
    {
        if (from.startsWith("/"))
        {
            from = from.substring(1);
        }
        if (to.startsWith("/"))
        {
            to = to.substring(1);
        }
        final String apiUrl = getApiUrl("fileops/move");

        WebResource r = client.resource(apiUrl)
                .queryParam("root", "dropbox")
                .queryParam("from_path", from)
                .queryParam("to_path", to);

        OAuthParameters params = new OAuthParameters()
                .signatureMethod(HMAC_SHA1.NAME)
                .consumerKey(getAppKey())
                .token(token).version();

        OAuthSecrets secrets = new OAuthSecrets()
                .consumerSecret(getAppSecret())
                .tokenSecret(secret);

        OAuthClientFilter filter = new OAuthClientFilter(
                client.getProviders(),
                params,
                secrets
        );

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(filter);

        try
        {
            InputStream response = r.get(InputStream.class);
            return response;

        } catch (UniformInterfaceException e)
        {
            unwrapException(e);
        }
        // TODO cleanup
        return null;
    }

    @Override
    public void dispose()
    {
        if (client != null)
        {
            client.destroy();
        }
    }
}
