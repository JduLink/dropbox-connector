/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.mulesoft.module.dropbox;

import com.mulesoft.module.dropbox.jersey.AuthBuilderBehaviour;
import com.mulesoft.module.dropbox.jersey.DropboxResponseHandler;
import com.mulesoft.module.dropbox.jersey.MediaTypesBuilderBehaviour;
import com.mulesoft.module.dropbox.jersey.json.GsonFactory;
import com.mulesoft.module.dropbox.model.AccountInformation;
import com.mulesoft.module.dropbox.model.Item;
import com.mulesoft.module.dropbox.model.Link;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.oauth.OAuth2;
import org.mule.api.annotations.oauth.OAuthAccessToken;
import org.mule.api.annotations.oauth.OAuthAccessTokenIdentifier;
import org.mule.api.annotations.oauth.OAuthConsumerKey;
import org.mule.api.annotations.oauth.OAuthConsumerSecret;
import org.mule.api.annotations.oauth.OAuthProtected;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.param.Payload;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.api.json.JSONConfiguration;
import com.sun.jersey.multipart.FormDataBodyPart;
import com.sun.jersey.multipart.FormDataMultiPart;
import com.sun.jersey.multipart.MultiPart;
import com.sun.jersey.multipart.impl.MultiPartWriter;

import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Date;

import javax.ws.rs.core.MediaType;

import org.mule.api.MuleException;
import com.sun.jersey.core.impl.provider.entity.FormMultivaluedMapProvider;
import com.sun.jersey.core.impl.provider.entity.FormProvider;
import com.sun.jersey.core.impl.provider.entity.InputStreamProvider;
import com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider;
import org.mule.commons.jersey.JerseyUtil;
import org.mule.commons.jersey.provider.GsonProvider;

/**
 * Dropbox Cloud Connector.
 * The Dropbox Connector will allow to use the Dropbox REST API. Almost every operation that can be done via the API can be done thru this connector.
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "dropbox", schemaVersion = "3.3.0", friendlyName = "Dropbox", minMuleVersion = "3.3")
@OAuth2(authorizationUrl = "https://www.dropbox.com/1/oauth2/authorize",
		accessTokenUrl = "https://api.dropbox.com/1/oauth2/token",
        accessTokenRegex = "\"access_token\"[ ]*:[ ]*\"([^\\\"]*)\"",
        expirationRegex = "\"expires_in\"[ ]*:[ ]*([\\d]*)",
        refreshTokenRegex = "\"refresh_token\"[ ]*:[ ]*\"([^\\\"]*)\"")
public class DropboxConnector {
    private static final String API_VERSION = "1";
    private static final String ROOT_PARAM = "dropbox";
    private static final String API_CONTENT_URL = "files/" + ROOT_PARAM;

    private String accessTokenIdentifier;

	/**
	 * URL of the Dropbox server API
	 */
	@Configurable
	@Optional
	@Default("api.dropbox.com")
	private String server;

	/**
	 * URL of the Dropbox server content API
	 */
	@Configurable
	@Optional
	@Default("api-content.dropbox.com")
	private String contentServer;

	/**
	 * Dropbox server port
	 */
	@Configurable
	@Optional
	@Default("80")
	private int port;

	/**
	 * Application key
	 */
	@Configurable
	@OAuthConsumerKey
	private String appKey;

	/**
	 * Application secret
	 */
	@Configurable
	@OAuthConsumerSecret
	private String appSecret;

	@OAuthAccessToken
	private String accessToken;

    private JerseyUtil jerseyUtil;

    private WebResource apiResource;

    private WebResource contentResource;

    /**
     * This method initiaes the box client and the auth callback. Also, it
     * fetches the save/restore flows (if specified). If those are specified but
     * don't exist in the registry, then IllegalArgumentException is thrown
     *
     * @throws MuleException
     * @throws IllegalArgumentException
     *             if restore/save token flows are specified but don't exist
     */
    @Start
    public void init() throws MuleException {
        ClientConfig clientConfig = new DefaultClientConfig();
        clientConfig.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING, Boolean.TRUE);
        clientConfig.getClasses().add(MultiPartWriter.class);
        clientConfig.getClasses().add(MimeMultipartProvider.class);
        clientConfig.getClasses().add(InputStreamProvider.class);
        clientConfig.getClasses().add(FormProvider.class);
        clientConfig.getClasses().add(FormMultivaluedMapProvider.class);
        clientConfig.getSingletons().add(new GsonProvider(GsonFactory.get()));

        Client client = Client.create(clientConfig);
        Client contentClient = Client.create(clientConfig);
        contentClient.setChunkedEncodingSize(512);

        this.initJerseyUtil();

        this.apiResource = client.resource("https://");
        this.contentResource = contentClient.resource("https://");
    }

    private void initJerseyUtil() {
        JerseyUtil.Builder builder = JerseyUtil.builder().addRequestBehaviour(MediaTypesBuilderBehaviour.INSTANCE)
                .addRequestBehaviour(new AuthBuilderBehaviour(this)).setResponseHandler(DropboxResponseHandler.INSTANCE);

        this.jerseyUtil = builder.build();
    }

    @OAuthAccessTokenIdentifier
    public String getOAuthTokenAccessIdentifier() throws Exception {
        if (this.accessTokenIdentifier == null) {
            this.accessTokenIdentifier = this.getAccount().getUid();
        }

        return this.accessTokenIdentifier;
    }

	/**
	 * Upload file to Dropbox. The payload is an InputStream containing bytes of
	 * the data to be uploaded.
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:upload-file}
	 * 
	 * @param fileDataObj
	 *            file to be uploaded
	 * @param overwrite
	 * 				overwrite file in case it already exists           
	 * @param path
	 *            The destination path
	 * @param filename
	 *            The destination file name
	 * 
	 * @return Item with the metadata of the uploaded object
	 * @throws Exception
	 *             exception
	 */
//	@SuppressWarnings("resource")
//    @Processor
//	@OAuthProtected
//	public Item uploadFile(@Payload InputStream fileDataObj,
//							@Optional @Default("true") Boolean overwrite,
//							String path,
//							String filename) throws Exception {
//
//		final InputStream fileData = (InputStream) fileDataObj;
//
//		final String apiUrl = getApiContentUrl(path);
//
//		final FormDataBodyPart formDataBodyPart = new FormDataBodyPart(fileData, MediaType.APPLICATION_OCTET_STREAM_TYPE);
//		MultiPart parts = new FormDataMultiPart().bodyPart(formDataBodyPart);
//
//		formDataBodyPart.setContentDisposition(FormDataContentDisposition
//				.name("file")
//				.fileName(filename)
//				.size(fileData.available())
//				.modificationDate(new Date()).build());
//
//		WebResource r = getClient().resource(constructUri(getContentServer(), apiUrl,
//                String.format("file=%s&overwrite=%s&access_token=%s", filename, overwrite.toString(), getAccessToken())));
//
//        return r.type(MediaType.MULTIPART_FORM_DATA_TYPE).post(Item.class, parts);
//	}

	/**
	 * Create new folder on Dropbox
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:create-folder}
	 * 
	 * @param path
	 *            full path of the folder to be created
	 * 
	 * @return Item with the metadata of the created folder
	 * @throws Exception
	 *             exception
	 */
	@Processor
	@OAuthProtected
	public Item createFolder(String path) throws Exception {
        return this.jerseyUtil.post(
                this.apiResource.path("fileops").path("create_folder").queryParam("root", ROOT_PARAM).queryParam("path", path), Item.class, 200);
	}

	/**
	 * Deletes a file or folder.
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:delete}
	 * 
	 * @param path
	 *            full path to the file to be deleted
	 * 
	 * @return Item with the metadata of the deleted object
	 * @throws Exception
	 *             exception
	 */
	@Processor
	@OAuthProtected
	public Item delete(String path) throws Exception {
        return this.jerseyUtil.post(
                this.apiResource.path("fileops").path("delete").queryParam("root", ROOT_PARAM).queryParam("path", path), Item.class, 200);
	}

	/**
	 * Downloads a file from Dropbox
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:download-file}
	 * 
	 * @param path
	 *            path to the file
	 * @param delete
	 *            delete the file on the Dropbox after download (ignored if
	 *            moveTo is set)
	 *
	 * @return Stream containing the downloaded file data
	 * @throws Exception
	 *             exception
	 */
//	@Processor
//	@OAuthProtected
//	public InputStream downloadFile(String path,
//			@Optional @Default("false") boolean delete) throws Exception {
//		final String apiUrl = getApiContentUrl(path);
//
//		WebResource r = getClient().resource(constructUri(getContentServer(), apiUrl, String.format("access_token=%s", getAccessToken())));
//
//		InputStream response = r.get(InputStream.class);
//
//		if (delete)
//			delete(path);
//		return response;
//	}

	/**
	 * Lists the content of the remote directory
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:list}
	 * 
	 * @param path
	 *            path to the remote directory
	 * 
	 * @return List of files and/or folders
	 * @throws Exception
	 *             exception
	 */
//	@Processor
//	@OAuthProtected
//	public Item list(String path) throws Exception {
//		final String apiUrl = "metadata/dropbox/" + adaptPath(path);
//
//		WebResource r = getClient().resource(constructUri(getServer(), apiUrl, String.format("access_token=%s", getAccessToken())));
//
//		Item response = r.get(Item.class);
//		return response;
//	}

	/**
	 * Moves a file or folder to a new location.
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:move}
	 * 
	 * @param from
	 *            Specifies the file or folder to be moved from, relative to
	 *            root.
	 * @param to
	 *            Specifies the destination path, including the new name for the
	 *            file or folder, relative to root.
	 *            
	 * @return Item with the metadata of the moved object
	 * @throws Exception
	 *             exception
	 */
//	@Processor
//	@OAuthProtected
//	public Item move(String from, String to) throws Exception {
//		from = adaptPath(from);
//		to = adaptPath(to);
//		final String apiUrl = "fileops/move";
//
//		WebResource r = getClient().resource(constructUri(getServer(), apiUrl,
//		        String.format("root=%s&from_path=%s&to_path=%s&access_token=%s", ROOT_PARAM, from, to, getAccessToken())));
//
//		Item response = r.post(Item.class);
//
//		return response;
//	}
	
	/**
     * Copies a file or folder to a new location.
     * 
     * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:copy}
     * 
     * @param from
     *            Specifies the file or folder to be copied from, relative to
     *            root.
     * @param to
     *            Specifies the destination path, including the new name for the
     *            file or folder, relative to root.
     *            
     * @return Item with the metadata of the copied object
     * @throws Exception
     *             exception
     */
//    @Processor
//    @OAuthProtected
//    public Item copy(String from, String to) throws Exception {
//        from = adaptPath(from);
//        to = adaptPath(to);
//        final String apiUrl = "fileops/copy";
//
//        WebResource r = getClient().resource(constructUri(getServer(), apiUrl,
//                String.format("root=%s&from_path=%s&to_path=%s&access_token=%s", ROOT_PARAM, from, to, getAccessToken())));
//
//        Item response = r.post(Item.class);
//
//        return response;
//    }

	/**
	 * Creates and returns a Dropbox link to files or folders users can use to view a preview of the file in a web browser.
	 * 
	 * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:get-link}
	 * 
	 * @param path The path to the file or folder you want to link to.
	 * @param shortUrl Boolean indicating if the url returned will be shortened using the Dropbox url shortener (when true) or will link directly to the file's preview page (when false).
	 * @return Link. A Dropbox link to the given path.
	 * 
	 * @throws Exception exception
	 */
	@Processor
	@OAuthProtected
	public Link getLink(String path, @Optional @Default("true") Boolean shortUrl) throws Exception {
		path = adaptPath(path);

        return this.jerseyUtil.get(
                this.apiResource.path("shares").path("dropbox").path(path).queryParam("short_url", shortUrl.toString()), Link.class, 200);
	}

    /**
     * Requests the account's information.
     *
     * {@sample.xml ../../../doc/Dropbox-connector.xml.sample dropbox:get-account}
     *
     * @return AccountInformation. A Dropbox account's information.
     *
     * @throws Exception exception
     */
    @Processor
    @OAuthProtected
    public AccountInformation getAccount() throws Exception {
        return this.jerseyUtil.get(
                this.apiResource.path("account").path("info"), AccountInformation.class, 200);
    }

	// --------------------------------------

	public String getServer() {
		return server;
	}

	public void setServer(String server) {
		this.server = server;
	}

	public String getContentServer() {
		return contentServer;
	}

	public void setContentServer(String contentServer) {
		this.contentServer = contentServer;
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public String getAppKey() {
		return appKey;
	}

	public void setAppKey(String appKey) {
		this.appKey = appKey;
	}

	public String getAppSecret() {
		return appSecret;
	}

	public void setAppSecret(String appSecret) {
		this.appSecret = appSecret;
	}

	/**
	 * @param path
	 */
	protected String getApiContentUrl(String path) {
	    return API_CONTENT_URL + "/" + adaptPath(path);
	}

	public String getAccessToken() {
		return accessToken;
	}

	public void setAccessToken(String accessToken) {
		this.accessToken = accessToken;
	}

	private String adaptPath(String path) {
		if (path.startsWith("/")) {
			path = path.substring(1);
		}
		return path;
	}
	
	private URI constructUri(String server, String apiUrl, String params) 
	        throws URISyntaxException {
	    String path = String.format("/%s/%s", API_VERSION, apiUrl);
        return new URI("https", server, path, params, null);
	}
}
